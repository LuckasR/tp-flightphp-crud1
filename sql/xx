-- ============================================
-- ÉTAPE 5 - STRUCTURE BASE DE DONNÉES
-- ============================================

-- 1. Table pour les simulations de prêt
CREATE TABLE simulations_pret (
    id INT PRIMARY KEY AUTO_INCREMENT,
    numero_simulation VARCHAR(50) UNIQUE NOT NULL,
    id_client INT NOT NULL,
    id_type_pret INT NOT NULL,
    montant_demande DECIMAL(15,2) NOT NULL,
    duree_demandee INT NOT NULL,
    taux_applique DECIMAL(5,2) NOT NULL,
    taux_assurance DECIMAL(5,2) NOT NULL,
    mensualite_capital DECIMAL(15,2) NOT NULL,
    mensualite_assurance DECIMAL(15,2) NOT NULL,
    mensualite_totale DECIMAL(15,2) NOT NULL,
    montant_total_assurance DECIMAL(15,2) NOT NULL,
    montant_total_pret DECIMAL(15,2) NOT NULL,
    frais_dossier DECIMAL(15,2) NOT NULL,
    date_simulation DATETIME DEFAULT CURRENT_TIMESTAMP,
    statut ENUM('active', 'convertie', 'expiree') DEFAULT 'active',
    notes TEXT,
    date_expiration DATE,
    FOREIGN KEY (id_client) REFERENCES client(id),
    FOREIGN KEY (id_type_pret) REFERENCES type_pret(id),
    INDEX idx_client_simulation (id_client),
    INDEX idx_date_simulation (date_simulation),
    INDEX idx_statut (statut)
);

-- 2. Table pour les comparaisons de simulations
CREATE TABLE comparaisons_simulation (
    id INT PRIMARY KEY AUTO_INCREMENT,
    id_simulation_1 INT NOT NULL,
    id_simulation_2 INT NOT NULL,
    date_comparaison DATETIME DEFAULT CURRENT_TIMESTAMP,
    id_client INT NOT NULL,
    FOREIGN KEY (id_simulation_1) REFERENCES simulations_pret(id),
    FOREIGN KEY (id_simulation_2) REFERENCES simulations_pret(id),
    FOREIGN KEY (id_client) REFERENCES client(id),
    INDEX idx_client_comparaison (id_client)
);

-- 3. Table pour le suivi des fonds disponibles (S4 INFO uniquement)
CREATE TABLE fonds_disponibles (
    id INT PRIMARY KEY AUTO_INCREMENT,
    annee INT NOT NULL,
    mois INT NOT NULL,
    montant_initial DECIMAL(15,2) NOT NULL,
    montant_prete DECIMAL(15,2) DEFAULT 0,
    montant_rembourse DECIMAL(15,2) DEFAULT 0,
    montant_disponible DECIMAL(15,2) NOT NULL,
    date_calcul DATETIME DEFAULT CURRENT_TIMESTAMP,
    UNIQUE KEY unique_mois_annee (annee, mois),
    INDEX idx_periode (annee, mois)
);

-- 4. Table pour l'historique des mouvements de fonds
CREATE TABLE mouvements_fonds (
    id INT PRIMARY KEY AUTO_INCREMENT,
    annee INT NOT NULL,
    mois INT NOT NULL,
    type_mouvement ENUM('pret_accorde', 'remboursement', 'ajout_capital', 'retrait_capital') NOT NULL,
    montant DECIMAL(15,2) NOT NULL,
    id_pret INT NULL,
    description TEXT,
    date_mouvement DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_pret) REFERENCES pret(id),
    INDEX idx_periode_mouvement (annee, mois),
    INDEX idx_type_mouvement (type_mouvement)
);

-- 5. Mise à jour de la table type_pret pour inclure le taux d'assurance
ALTER TABLE type_pret ADD COLUMN taux_assurance DECIMAL(5,2) DEFAULT 0.5 COMMENT 'Taux assurance mensuel en % du capital';

-- 6. Mise à jour de la table pret pour inclure les nouveaux champs
ALTER TABLE pret ADD COLUMN taux_assurance DECIMAL(5,2) DEFAULT 0;
ALTER TABLE pret ADD COLUMN mensualite_assurance DECIMAL(15,2) DEFAULT 0;
ALTER TABLE pret ADD COLUMN montant_total_assurance DECIMAL(15,2) DEFAULT 0;
ALTER TABLE pret ADD COLUMN id_simulation INT NULL COMMENT 'Référence vers la simulation convertie';
ALTER TABLE pret ADD FOREIGN KEY (id_simulation) REFERENCES simulations_pret(id);

-- 7. Trigger pour mettre à jour automatiquement les fonds disponibles
DELIMITER //
CREATE TRIGGER update_fonds_after_pret 
AFTER INSERT ON pret
FOR EACH ROW
BEGIN
    DECLARE current_year INT;
    DECLARE current_month INT;
    
    SET current_year = YEAR(NEW.date_decision);
    SET current_month = MONTH(NEW.date_decision);
    
    -- Enregistrer le mouvement
    INSERT INTO mouvements_fonds (annee, mois, type_mouvement, montant, id_pret, description)
    VALUES (current_year, current_month, 'pret_accorde', NEW.montant_accorde, NEW.id, 
            CONCAT('Prêt accordé - ', NEW.numero_pret));
    
    -- Mettre à jour les fonds disponibles
    INSERT INTO fonds_disponibles (annee, mois, montant_initial, montant_prete, montant_disponible)
    VALUES (current_year, current_month, 0, NEW.montant_accorde, -NEW.montant_accorde)
    ON DUPLICATE KEY UPDATE 
        montant_prete = montant_prete + NEW.montant_accorde,
        montant_disponible = montant_disponible - NEW.montant_accorde;
END//
DELIMITER ;

-- 8. Procédure pour calculer les mensualités avec assurance
DELIMITER //
CREATE PROCEDURE CalculerMensualiteAvecAssurance(
    IN p_montant DECIMAL(15,2),
    IN p_duree INT,
    IN p_taux_interet DECIMAL(5,2),
    IN p_taux_assurance DECIMAL(5,2),
    OUT p_mensualite_capital DECIMAL(15,2),
    OUT p_mensualite_assurance DECIMAL(15,2),
    OUT p_mensualite_totale DECIMAL(15,2),
    OUT p_montant_total_assurance DECIMAL(15,2)
)
BEGIN
    DECLARE taux_mensuel DECIMAL(10,8);
    
    -- Calcul du taux mensuel
    SET taux_mensuel = p_taux_interet / 100 / 12;
    
    -- Calcul de la mensualité du capital (annuité)
    IF taux_mensuel > 0 THEN
        SET p_mensualite_capital = p_montant * (taux_mensuel * POWER(1 + taux_mensuel, p_duree)) / 
                                   (POWER(1 + taux_mensuel, p_duree) - 1);
    ELSE
        SET p_mensualite_capital = p_montant / p_duree;
    END IF;
    
    -- Calcul de l'assurance mensuelle (% du capital)
    SET p_mensualite_assurance = p_montant * (p_taux_assurance / 100);
    
    -- Mensualité totale
    SET p_mensualite_totale = p_mensualite_capital + p_mensualite_assurance;
    
    -- Montant total assurance
    SET p_montant_total_assurance = p_mensualite_assurance * p_duree;
END//
DELIMITER ;

-- 9. Vue pour le tableau de bord des fonds (S4 INFO)
CREATE VIEW v_tableau_bord_fonds AS
SELECT 
    f.annee,
    f.mois,
    f.montant_initial,
    f.montant_prete,
    f.montant_rembourse,
    f.montant_disponible,
    CONCAT(f.annee, '-', LPAD(f.mois, 2, '0')) as periode,
    (SELECT COUNT(*) FROM pret p WHERE YEAR(p.date_decision) = f.annee AND MONTH(p.date_decision) = f.mois) as nb_prets_accordes,
    (SELECT COALESCE(SUM(montant), 0) FROM mouvements_fonds m 
     WHERE m.annee = f.annee AND m.mois = f.mois AND m.type_mouvement = 'remboursement') as remboursements_mois
FROM fonds_disponibles f
ORDER BY f.annee DESC, f.mois DESC;

-- 10. Données d'exemple pour les types de prêt avec assurance
UPDATE type_pret SET taux_assurance = 0.5 WHERE nom = 'Personnel';
UPDATE type_pret SET taux_assurance = 0.3 WHERE nom = 'Immobilier';
UPDATE type_pret SET taux_assurance = 0.7 WHERE nom = 'Auto';

-- 11. Insertion de données d'exemple pour les fonds disponibles
INSERT INTO fonds_disponibles (annee, mois, montant_initial, montant_disponible) VALUES
(2025, 1, 1000000, 1000000),
(2025, 2, 1000000, 1000000),
(2025, 3, 1000000, 1000000),
(2025, 4, 1000000, 1000000),
(2025, 5, 1000000, 1000000),
(2025, 6, 1000000, 1000000),
(2025, 7, 1000000, 1000000),
(2025, 8, 1000000, 1000000),
(2025, 9, 1000000, 1000000),
(2025, 10, 1000000, 1000000),
(2025, 11, 1000000, 1000000),
(2025, 12, 1000000, 1000000);

-- 12. Index pour optimiser les performances
CREATE INDEX idx_pret_date_decision ON pret(date_decision);
CREATE INDEX idx_simulation_client_date ON simulations_pret(id_client, date_simulation);
CREATE INDEX idx_fonds_periode ON fonds_disponibles(annee, mois);

-- ============================================
-- REQUÊTES UTILES POUR TESTER
-- ============================================

-- Voir les simulations d'un client
SELECT * FROM simulations_pret WHERE id_client = 1 ORDER BY date_simulation DESC;

-- Voir les fonds disponibles par mois
SELECT * FROM v_tableau_bord_fonds WHERE annee = 2025;

-- Calculer une simulation
CALL CalculerMensualiteAvecAssurance(100000, 24, 12, 0.5, @capital, @assurance, @total, @total_assurance);
SELECT @capital as mensualite_capital, @assurance as mensualite_assurance, @total as mensualite_totale, @total_assurance as montant_total_assurance;